import axios from "axios";
import { API_BASE_URL, API_ENDPOINTS } from "./globalvariable";

const headers = {
  "Content-Type": "application/json",
};

// Interfaces for request and response data
interface Vulnerability {
  id: string;
  name: string;
  description: string;
  createdAt: string;
  updatedAt: string;
}

interface ApiResponse<T> {
  success: boolean;
  status: number;
  msg: string;
  data: T;
}

interface ErrorResponse {
  success: boolean;
  status: number;
  msg: string;
}

// Fetch all vulnerabilities
export const fetchAllVulnerabilities = async (): Promise<
  ApiResponse<Vulnerability[]> | ErrorResponse
> => {
  try {
    const response = await axios.get<ApiResponse<Vulnerability[]>>(
      `${API_BASE_URL}${API_ENDPOINTS.VULNERABILITY.LIST}`,
      {
        headers,
        withCredentials: true,
      }
    );
    return response.data;
  } catch (error) {
    console.error("fetchAllVulnerabilities failed:", error);
    throw error;
  }
};

// Create a new vulnerability
export const createVulnerability = async (
  vulnerability: Omit<Vulnerability, "id" | "createdAt" | "updatedAt">
): Promise<ApiResponse<Vulnerability> | ErrorResponse> => {
  try {
    const response = await axios.post<ApiResponse<Vulnerability>>(
      `${API_BASE_URL}${API_ENDPOINTS.VULNERABILITY.CREATE}`,
      vulnerability,
      {
        headers,
        withCredentials: true,
      }
    );
    return response.data;
  } catch (error) {
    console.error("createVulnerability failed:", error);
    throw error;
  }
};

// Fetch a specific vulnerability by ID
export const fetchVulnerabilityById = async (
  id: string
): Promise<ApiResponse<Vulnerability> | ErrorResponse> => {
  try {
    const response = await axios.get<ApiResponse<Vulnerability>>(
      `${API_BASE_URL}${API_ENDPOINTS.VULNERABILITY.GET}/${id}`,
      {
        headers,
        withCredentials: true,
      }
    );
    return response.data;
  } catch (error) {
    console.error("fetchVulnerabilityById failed:", error);
    throw error;
  }
};

// Update a specific vulnerability by ID
export const updateVulnerability = async (
  id: string,
  vulnerability: Omit<Vulnerability, "id" | "createdAt" | "updatedAt">
): Promise<ApiResponse<Vulnerability> | ErrorResponse> => {
  try {
    const response = await axios.put<ApiResponse<Vulnerability>>(
      `${API_BASE_URL}${API_ENDPOINTS.VULNERABILITY.UPDATE}/${id}`,
      vulnerability,
      {
        headers,
        withCredentials: true,
      }
    );
    return response.data;
  } catch (error) {
    console.error("updateVulnerability failed:", error);
    throw error;
  }
};

// Delete a specific vulnerability by ID
export const deleteVulnerability = async (
  id: string
): Promise<ApiResponse<null> | ErrorResponse> => {
  try {
    const response = await axios.delete<ApiResponse<null>>(
      `${API_BASE_URL}${API_ENDPOINTS.VULNERABILITY.DELETE}/${id}`,
      {
        headers,
        withCredentials: true,
      }
    );
    return response.data;
  } catch (error) {
    console.error("deleteVulnerability failed:", error);
    throw error;
  }
};
