import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { NavbarEmp } from "../../components/NavbarEmp";
import Footer from "../../components/Footer";
import "./PostEmployers.css";

const PostJobEmp: React.FC = () => {
  const navigate = useNavigate();

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°
  const [jobTitle, setJobTitle] = useState("");
  const [location, setLocation] = useState("");
  const [jobDescription, setJobDescription] = useState("");
  const [requirements, setRequirements] = useState("");
  const [salary, setSalary] = useState("");
  const [workDays, setWorkDays] = useState("‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå - ‡∏®‡∏∏‡∏Å‡∏£‡πå");
  const [startTime, setStartTime] = useState("09:00"); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 09:00
  const [endTime, setEndTime] = useState("18:00"); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 18:00
  const [successMessage, setSuccessMessage] = useState("");

  // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
  const workDayOptions = [
    "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå - ‡∏®‡∏∏‡∏Å‡∏£‡πå",
    "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå - ‡πÄ‡∏™‡∏≤‡∏£‡πå",
    "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå - ‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå",
    "‡πÄ‡∏™‡∏≤‡∏£‡πå - ‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå",
    "‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
  ];

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤ (00:00 - 23:30 ‡∏ó‡∏∏‡∏Å 30 ‡∏ô‡∏≤‡∏ó‡∏µ)
  const generateTimeOptions = () => {
    const times = [];
    for (let hour = 0; hour < 24; hour++) {
      for (const minute of [0, 30]) {
        const time = `${String(hour).padStart(2, "0")}:${String(
          minute
        ).padStart(2, "0")}`;
        times.push(time);
      }
    }
    return times;
  };

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
  const validateInputs = () => {
    if (
      !jobTitle.trim() ||
      !location.trim() ||
      !jobDescription.trim() ||
      !requirements.trim() ||
      !salary.trim()
    ) {
      alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏á‡∏≤‡∏ô!");
      return false;
    }

    if (isNaN(Number(salary)) || Number(salary) <= 0) {
      alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0!");
      return false;
    }

    if (startTime >= endTime) {
      alert("‚ö†Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô!");
      return false;
    }

    return true;
  };

  const handlePostJob = () => {
    if (!validateInputs()) return;

    const newJob = {
      id: Date.now().toString(),
      title: jobTitle,
      location,
      description: jobDescription,
      requirements,
      salary,
      workDays,
      workHours: `${startTime} - ${endTime}`,
      postedAt: new Date().toLocaleString("th-TH", {
        dateStyle: "full",
        timeStyle: "short",
      }),
    };

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Employer ‡∏•‡∏á `jobs_emp` (HomePageEmp.tsx ‡πÉ‡∏ä‡πâ)
    const existingJobsEmp = JSON.parse(
      localStorage.getItem("jobs_emp") || "[]"
    );
    const updatedJobsEmp = [newJob, ...existingJobsEmp];
    localStorage.setItem("jobs_emp", JSON.stringify(updatedJobsEmp));

    // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ `HomePageEmp.tsx`
    setSuccessMessage("üéâ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!");
    setTimeout(() => navigate("/homeemp"), 500);
  };

  return (
    <div>
      <NavbarEmp isLoggedIn={false} />
      <div className="post-job-container">
        <h1>‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏á‡∏≤‡∏ô</h1>

        {/* ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô */}
        {successMessage && <p className="success-message">{successMessage}</p>}

        <form className="post-job-form">
          {/* ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô */}
          <div className="form-group">
            <label>‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô</label>
            <input
              type="text"
              value={jobTitle}
              onChange={(e) => setJobTitle(e.target.value.trim())}
              placeholder="‡πÄ‡∏ä‡πà‡∏ô Developer, Designer"
            />
          </div>

          {/* ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô */}
          <div className="form-group">
            <label>‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</label>
            <input
              type="text"
              value={location}
              onChange={(e) => setLocation(e.target.value.trim())}
              placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø, ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏Å‡∏•"
            />
          </div>

          {/* ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô */}
          <div className="form-group">
            <label>‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏ö‡∏≤‡∏ó)</label>
            <input
              type="number"
              value={salary}
              onChange={(e) => setSalary(e.target.value)}
              placeholder="‡πÄ‡∏ä‡πà‡∏ô 30000"
              min="1"
              step="1000"
            />
          </div>

          {/* ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô */}
          <div className="form-group">
            <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</label>
            <select
              value={workDays}
              onChange={(e) => setWorkDays(e.target.value)}
              className="form-select time-select"
            >
              {workDayOptions.map((day) => (
                <option key={day} value={day}>
                  {day}
                </option>
              ))}
            </select>
          </div>

          {/* ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô */}
          <div className="form-group">
            <label>‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô</label>
            <select
              value={startTime}
              onChange={(e) => setStartTime(e.target.value)}
              className="form-select time-select"
            >
              {generateTimeOptions().map((time) => (
                <option key={time} value={time}>
                  {time}
                </option>
              ))}
            </select>
          </div>

          {/* ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô */}
          <div className="form-group">
            <label>‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô</label>
            <select
              value={endTime}
              onChange={(e) => setEndTime(e.target.value)}
              className="form-select time-select"
            >
              {generateTimeOptions().map((time) => (
                <option key={time} value={time}>
                  {time}
                </option>
              ))}
            </select>
          </div>

          {/* ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô */}
          <div className="form-group">
            <label>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô</label>
            <textarea
              value={jobDescription}
              onChange={(e) => setJobDescription(e.target.value.trim())}
              placeholder="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏á‡∏≤‡∏ô"
              rows={3}
            />
          </div>

          {/* ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ */}
          <div className="form-group">
            <label>‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</label>
            <textarea
              value={requirements}
              onChange={(e) => setRequirements(e.target.value.trim())}
              placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£"
              rows={3}
            />
          </div>

          {/* ‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏á‡∏≤‡∏ô */}
          <button
            type="button"
            onClick={handlePostJob}
            className="submit-button"
          >
            ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏á‡∏≤‡∏ô
          </button>
        </form>
      </div>
      <Footer />
    </div>
  );
};

export default PostJobEmp;
